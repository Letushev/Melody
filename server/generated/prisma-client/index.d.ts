// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  melody: (where?: MelodyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  melody: (where: MelodyWhereUniqueInput) => MelodyNullablePromise;
  melodies: (args?: {
    where?: MelodyWhereInput;
    orderBy?: MelodyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Melody>;
  melodiesConnection: (args?: {
    where?: MelodyWhereInput;
    orderBy?: MelodyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MelodyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMelody: (data: MelodyCreateInput) => MelodyPromise;
  updateMelody: (args: {
    data: MelodyUpdateInput;
    where: MelodyWhereUniqueInput;
  }) => MelodyPromise;
  updateManyMelodies: (args: {
    data: MelodyUpdateManyMutationInput;
    where?: MelodyWhereInput;
  }) => BatchPayloadPromise;
  upsertMelody: (args: {
    where: MelodyWhereUniqueInput;
    create: MelodyCreateInput;
    update: MelodyUpdateInput;
  }) => MelodyPromise;
  deleteMelody: (where: MelodyWhereUniqueInput) => MelodyPromise;
  deleteManyMelodies: (where?: MelodyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  melody: (
    where?: MelodySubscriptionWhereInput
  ) => MelodySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MelodyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "by_ASC"
  | "by_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "public_ASC"
  | "public_DESC"
  | "level_ASC"
  | "level_DESC"
  | "likes_ASC"
  | "likes_DESC"
  | "tabs_ASC"
  | "tabs_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "password_ASC"
  | "password_DESC"
  | "image_ASC"
  | "image_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type MelodyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MelodyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  by?: Maybe<String>;
  by_not?: Maybe<String>;
  by_in?: Maybe<String[] | String>;
  by_not_in?: Maybe<String[] | String>;
  by_lt?: Maybe<String>;
  by_lte?: Maybe<String>;
  by_gt?: Maybe<String>;
  by_gte?: Maybe<String>;
  by_contains?: Maybe<String>;
  by_not_contains?: Maybe<String>;
  by_starts_with?: Maybe<String>;
  by_not_starts_with?: Maybe<String>;
  by_ends_with?: Maybe<String>;
  by_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  public?: Maybe<Boolean>;
  public_not?: Maybe<Boolean>;
  level?: Maybe<String>;
  level_not?: Maybe<String>;
  level_in?: Maybe<String[] | String>;
  level_not_in?: Maybe<String[] | String>;
  level_lt?: Maybe<String>;
  level_lte?: Maybe<String>;
  level_gt?: Maybe<String>;
  level_gte?: Maybe<String>;
  level_contains?: Maybe<String>;
  level_not_contains?: Maybe<String>;
  level_starts_with?: Maybe<String>;
  level_not_starts_with?: Maybe<String>;
  level_ends_with?: Maybe<String>;
  level_not_ends_with?: Maybe<String>;
  likes?: Maybe<Int>;
  likes_not?: Maybe<Int>;
  likes_in?: Maybe<Int[] | Int>;
  likes_not_in?: Maybe<Int[] | Int>;
  likes_lt?: Maybe<Int>;
  likes_lte?: Maybe<Int>;
  likes_gt?: Maybe<Int>;
  likes_gte?: Maybe<Int>;
  tabs?: Maybe<String>;
  tabs_not?: Maybe<String>;
  tabs_in?: Maybe<String[] | String>;
  tabs_not_in?: Maybe<String[] | String>;
  tabs_lt?: Maybe<String>;
  tabs_lte?: Maybe<String>;
  tabs_gt?: Maybe<String>;
  tabs_gte?: Maybe<String>;
  tabs_contains?: Maybe<String>;
  tabs_not_contains?: Maybe<String>;
  tabs_starts_with?: Maybe<String>;
  tabs_not_starts_with?: Maybe<String>;
  tabs_ends_with?: Maybe<String>;
  tabs_not_ends_with?: Maybe<String>;
  AND?: Maybe<MelodyWhereInput[] | MelodyWhereInput>;
  OR?: Maybe<MelodyWhereInput[] | MelodyWhereInput>;
  NOT?: Maybe<MelodyWhereInput[] | MelodyWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  melodies_every?: Maybe<MelodyWhereInput>;
  melodies_some?: Maybe<MelodyWhereInput>;
  melodies_none?: Maybe<MelodyWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  nickname?: Maybe<String>;
}>;

export interface MelodyCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  by: String;
  createdBy: UserCreateOneWithoutMelodiesInput;
  public: Boolean;
  level?: Maybe<String>;
  likes?: Maybe<Int>;
  tabs?: Maybe<String>;
}

export interface UserCreateOneWithoutMelodiesInput {
  create?: Maybe<UserCreateWithoutMelodiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMelodiesInput {
  id?: Maybe<ID_Input>;
  nickname: String;
  password: String;
  image?: Maybe<String>;
}

export interface MelodyUpdateInput {
  name?: Maybe<String>;
  by?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutMelodiesInput>;
  public?: Maybe<Boolean>;
  level?: Maybe<String>;
  likes?: Maybe<Int>;
  tabs?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutMelodiesInput {
  create?: Maybe<UserCreateWithoutMelodiesInput>;
  update?: Maybe<UserUpdateWithoutMelodiesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMelodiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMelodiesDataInput {
  nickname?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpsertWithoutMelodiesInput {
  update: UserUpdateWithoutMelodiesDataInput;
  create: UserCreateWithoutMelodiesInput;
}

export interface MelodyUpdateManyMutationInput {
  name?: Maybe<String>;
  by?: Maybe<String>;
  public?: Maybe<Boolean>;
  level?: Maybe<String>;
  likes?: Maybe<Int>;
  tabs?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  nickname: String;
  password: String;
  image?: Maybe<String>;
  melodies?: Maybe<MelodyCreateManyWithoutCreatedByInput>;
}

export interface MelodyCreateManyWithoutCreatedByInput {
  create?: Maybe<
    MelodyCreateWithoutCreatedByInput[] | MelodyCreateWithoutCreatedByInput
  >;
  connect?: Maybe<MelodyWhereUniqueInput[] | MelodyWhereUniqueInput>;
}

export interface MelodyCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  by: String;
  public: Boolean;
  level?: Maybe<String>;
  likes?: Maybe<Int>;
  tabs?: Maybe<String>;
}

export interface UserUpdateInput {
  nickname?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  melodies?: Maybe<MelodyUpdateManyWithoutCreatedByInput>;
}

export interface MelodyUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    MelodyCreateWithoutCreatedByInput[] | MelodyCreateWithoutCreatedByInput
  >;
  delete?: Maybe<MelodyWhereUniqueInput[] | MelodyWhereUniqueInput>;
  connect?: Maybe<MelodyWhereUniqueInput[] | MelodyWhereUniqueInput>;
  set?: Maybe<MelodyWhereUniqueInput[] | MelodyWhereUniqueInput>;
  disconnect?: Maybe<MelodyWhereUniqueInput[] | MelodyWhereUniqueInput>;
  update?: Maybe<
    | MelodyUpdateWithWhereUniqueWithoutCreatedByInput[]
    | MelodyUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | MelodyUpsertWithWhereUniqueWithoutCreatedByInput[]
    | MelodyUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<MelodyScalarWhereInput[] | MelodyScalarWhereInput>;
  updateMany?: Maybe<
    | MelodyUpdateManyWithWhereNestedInput[]
    | MelodyUpdateManyWithWhereNestedInput
  >;
}

export interface MelodyUpdateWithWhereUniqueWithoutCreatedByInput {
  where: MelodyWhereUniqueInput;
  data: MelodyUpdateWithoutCreatedByDataInput;
}

export interface MelodyUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  by?: Maybe<String>;
  public?: Maybe<Boolean>;
  level?: Maybe<String>;
  likes?: Maybe<Int>;
  tabs?: Maybe<String>;
}

export interface MelodyUpsertWithWhereUniqueWithoutCreatedByInput {
  where: MelodyWhereUniqueInput;
  update: MelodyUpdateWithoutCreatedByDataInput;
  create: MelodyCreateWithoutCreatedByInput;
}

export interface MelodyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  by?: Maybe<String>;
  by_not?: Maybe<String>;
  by_in?: Maybe<String[] | String>;
  by_not_in?: Maybe<String[] | String>;
  by_lt?: Maybe<String>;
  by_lte?: Maybe<String>;
  by_gt?: Maybe<String>;
  by_gte?: Maybe<String>;
  by_contains?: Maybe<String>;
  by_not_contains?: Maybe<String>;
  by_starts_with?: Maybe<String>;
  by_not_starts_with?: Maybe<String>;
  by_ends_with?: Maybe<String>;
  by_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  public?: Maybe<Boolean>;
  public_not?: Maybe<Boolean>;
  level?: Maybe<String>;
  level_not?: Maybe<String>;
  level_in?: Maybe<String[] | String>;
  level_not_in?: Maybe<String[] | String>;
  level_lt?: Maybe<String>;
  level_lte?: Maybe<String>;
  level_gt?: Maybe<String>;
  level_gte?: Maybe<String>;
  level_contains?: Maybe<String>;
  level_not_contains?: Maybe<String>;
  level_starts_with?: Maybe<String>;
  level_not_starts_with?: Maybe<String>;
  level_ends_with?: Maybe<String>;
  level_not_ends_with?: Maybe<String>;
  likes?: Maybe<Int>;
  likes_not?: Maybe<Int>;
  likes_in?: Maybe<Int[] | Int>;
  likes_not_in?: Maybe<Int[] | Int>;
  likes_lt?: Maybe<Int>;
  likes_lte?: Maybe<Int>;
  likes_gt?: Maybe<Int>;
  likes_gte?: Maybe<Int>;
  tabs?: Maybe<String>;
  tabs_not?: Maybe<String>;
  tabs_in?: Maybe<String[] | String>;
  tabs_not_in?: Maybe<String[] | String>;
  tabs_lt?: Maybe<String>;
  tabs_lte?: Maybe<String>;
  tabs_gt?: Maybe<String>;
  tabs_gte?: Maybe<String>;
  tabs_contains?: Maybe<String>;
  tabs_not_contains?: Maybe<String>;
  tabs_starts_with?: Maybe<String>;
  tabs_not_starts_with?: Maybe<String>;
  tabs_ends_with?: Maybe<String>;
  tabs_not_ends_with?: Maybe<String>;
  AND?: Maybe<MelodyScalarWhereInput[] | MelodyScalarWhereInput>;
  OR?: Maybe<MelodyScalarWhereInput[] | MelodyScalarWhereInput>;
  NOT?: Maybe<MelodyScalarWhereInput[] | MelodyScalarWhereInput>;
}

export interface MelodyUpdateManyWithWhereNestedInput {
  where: MelodyScalarWhereInput;
  data: MelodyUpdateManyDataInput;
}

export interface MelodyUpdateManyDataInput {
  name?: Maybe<String>;
  by?: Maybe<String>;
  public?: Maybe<Boolean>;
  level?: Maybe<String>;
  likes?: Maybe<Int>;
  tabs?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  nickname?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
}

export interface MelodySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MelodyWhereInput>;
  AND?: Maybe<MelodySubscriptionWhereInput[] | MelodySubscriptionWhereInput>;
  OR?: Maybe<MelodySubscriptionWhereInput[] | MelodySubscriptionWhereInput>;
  NOT?: Maybe<MelodySubscriptionWhereInput[] | MelodySubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Melody {
  id: ID_Output;
  name: String;
  by: String;
  createdAt: DateTimeOutput;
  public: Boolean;
  level?: String;
  likes?: Int;
  tabs?: String;
}

export interface MelodyPromise extends Promise<Melody>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  by: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  public: () => Promise<Boolean>;
  level: () => Promise<String>;
  likes: () => Promise<Int>;
  tabs: () => Promise<String>;
}

export interface MelodySubscription
  extends Promise<AsyncIterator<Melody>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  by: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  public: () => Promise<AsyncIterator<Boolean>>;
  level: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<Int>>;
  tabs: () => Promise<AsyncIterator<String>>;
}

export interface MelodyNullablePromise
  extends Promise<Melody | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  by: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  public: () => Promise<Boolean>;
  level: () => Promise<String>;
  likes: () => Promise<Int>;
  tabs: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  nickname: String;
  password: String;
  image?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  melodies: <T = FragmentableArray<Melody>>(args?: {
    where?: MelodyWhereInput;
    orderBy?: MelodyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  melodies: <T = Promise<AsyncIterator<MelodySubscription>>>(args?: {
    where?: MelodyWhereInput;
    orderBy?: MelodyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  melodies: <T = FragmentableArray<Melody>>(args?: {
    where?: MelodyWhereInput;
    orderBy?: MelodyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MelodyConnection {
  pageInfo: PageInfo;
  edges: MelodyEdge[];
}

export interface MelodyConnectionPromise
  extends Promise<MelodyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MelodyEdge>>() => T;
  aggregate: <T = AggregateMelodyPromise>() => T;
}

export interface MelodyConnectionSubscription
  extends Promise<AsyncIterator<MelodyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MelodyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMelodySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface MelodyEdge {
  node: Melody;
  cursor: String;
}

export interface MelodyEdgePromise extends Promise<MelodyEdge>, Fragmentable {
  node: <T = MelodyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MelodyEdgeSubscription
  extends Promise<AsyncIterator<MelodyEdge>>,
    Fragmentable {
  node: <T = MelodySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMelody {
  count: Int;
}

export interface AggregateMelodyPromise
  extends Promise<AggregateMelody>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMelodySubscription
  extends Promise<AsyncIterator<AggregateMelody>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface MelodySubscriptionPayload {
  mutation: MutationType;
  node: Melody;
  updatedFields: String[];
  previousValues: MelodyPreviousValues;
}

export interface MelodySubscriptionPayloadPromise
  extends Promise<MelodySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MelodyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MelodyPreviousValuesPromise>() => T;
}

export interface MelodySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MelodySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MelodySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MelodyPreviousValuesSubscription>() => T;
}

export interface MelodyPreviousValues {
  id: ID_Output;
  name: String;
  by: String;
  createdAt: DateTimeOutput;
  public: Boolean;
  level?: String;
  likes?: Int;
  tabs?: String;
}

export interface MelodyPreviousValuesPromise
  extends Promise<MelodyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  by: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  public: () => Promise<Boolean>;
  level: () => Promise<String>;
  likes: () => Promise<Int>;
  tabs: () => Promise<String>;
}

export interface MelodyPreviousValuesSubscription
  extends Promise<AsyncIterator<MelodyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  by: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  public: () => Promise<AsyncIterator<Boolean>>;
  level: () => Promise<AsyncIterator<String>>;
  likes: () => Promise<AsyncIterator<Int>>;
  tabs: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  nickname: String;
  password: String;
  image?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickname: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickname: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Melody",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
