module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMelody {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Melody {
  id: ID!
  name: String!
  by: String!
  createdBy: User!
  createdAt: DateTime!
}

type MelodyConnection {
  pageInfo: PageInfo!
  edges: [MelodyEdge]!
  aggregate: AggregateMelody!
}

input MelodyCreateInput {
  id: ID
  name: String!
  by: String!
  createdBy: UserCreateOneWithoutMelodiesInput!
}

input MelodyCreateManyWithoutCreatedByInput {
  create: [MelodyCreateWithoutCreatedByInput!]
  connect: [MelodyWhereUniqueInput!]
}

input MelodyCreateWithoutCreatedByInput {
  id: ID
  name: String!
  by: String!
}

type MelodyEdge {
  node: Melody!
  cursor: String!
}

enum MelodyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  by_ASC
  by_DESC
  createdAt_ASC
  createdAt_DESC
}

type MelodyPreviousValues {
  id: ID!
  name: String!
  by: String!
  createdAt: DateTime!
}

input MelodyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  by: String
  by_not: String
  by_in: [String!]
  by_not_in: [String!]
  by_lt: String
  by_lte: String
  by_gt: String
  by_gte: String
  by_contains: String
  by_not_contains: String
  by_starts_with: String
  by_not_starts_with: String
  by_ends_with: String
  by_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MelodyScalarWhereInput!]
  OR: [MelodyScalarWhereInput!]
  NOT: [MelodyScalarWhereInput!]
}

type MelodySubscriptionPayload {
  mutation: MutationType!
  node: Melody
  updatedFields: [String!]
  previousValues: MelodyPreviousValues
}

input MelodySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MelodyWhereInput
  AND: [MelodySubscriptionWhereInput!]
  OR: [MelodySubscriptionWhereInput!]
  NOT: [MelodySubscriptionWhereInput!]
}

input MelodyUpdateInput {
  name: String
  by: String
  createdBy: UserUpdateOneRequiredWithoutMelodiesInput
}

input MelodyUpdateManyDataInput {
  name: String
  by: String
}

input MelodyUpdateManyMutationInput {
  name: String
  by: String
}

input MelodyUpdateManyWithoutCreatedByInput {
  create: [MelodyCreateWithoutCreatedByInput!]
  delete: [MelodyWhereUniqueInput!]
  connect: [MelodyWhereUniqueInput!]
  set: [MelodyWhereUniqueInput!]
  disconnect: [MelodyWhereUniqueInput!]
  update: [MelodyUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [MelodyUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [MelodyScalarWhereInput!]
  updateMany: [MelodyUpdateManyWithWhereNestedInput!]
}

input MelodyUpdateManyWithWhereNestedInput {
  where: MelodyScalarWhereInput!
  data: MelodyUpdateManyDataInput!
}

input MelodyUpdateWithoutCreatedByDataInput {
  name: String
  by: String
}

input MelodyUpdateWithWhereUniqueWithoutCreatedByInput {
  where: MelodyWhereUniqueInput!
  data: MelodyUpdateWithoutCreatedByDataInput!
}

input MelodyUpsertWithWhereUniqueWithoutCreatedByInput {
  where: MelodyWhereUniqueInput!
  update: MelodyUpdateWithoutCreatedByDataInput!
  create: MelodyCreateWithoutCreatedByInput!
}

input MelodyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  by: String
  by_not: String
  by_in: [String!]
  by_not_in: [String!]
  by_lt: String
  by_lte: String
  by_gt: String
  by_gte: String
  by_contains: String
  by_not_contains: String
  by_starts_with: String
  by_not_starts_with: String
  by_ends_with: String
  by_not_ends_with: String
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MelodyWhereInput!]
  OR: [MelodyWhereInput!]
  NOT: [MelodyWhereInput!]
}

input MelodyWhereUniqueInput {
  id: ID
}

type Mutation {
  createMelody(data: MelodyCreateInput!): Melody!
  updateMelody(data: MelodyUpdateInput!, where: MelodyWhereUniqueInput!): Melody
  updateManyMelodies(data: MelodyUpdateManyMutationInput!, where: MelodyWhereInput): BatchPayload!
  upsertMelody(where: MelodyWhereUniqueInput!, create: MelodyCreateInput!, update: MelodyUpdateInput!): Melody!
  deleteMelody(where: MelodyWhereUniqueInput!): Melody
  deleteManyMelodies(where: MelodyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  melody(where: MelodyWhereUniqueInput!): Melody
  melodies(where: MelodyWhereInput, orderBy: MelodyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Melody]!
  melodiesConnection(where: MelodyWhereInput, orderBy: MelodyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MelodyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  melody(where: MelodySubscriptionWhereInput): MelodySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  nickname: String!
  password: String!
  image: String
  melodies(where: MelodyWhereInput, orderBy: MelodyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Melody!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  nickname: String!
  password: String!
  image: String
  melodies: MelodyCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutMelodiesInput {
  create: UserCreateWithoutMelodiesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMelodiesInput {
  id: ID
  nickname: String!
  password: String!
  image: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  nickname_ASC
  nickname_DESC
  password_ASC
  password_DESC
  image_ASC
  image_DESC
}

type UserPreviousValues {
  id: ID!
  nickname: String!
  password: String!
  image: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  nickname: String
  password: String
  image: String
  melodies: MelodyUpdateManyWithoutCreatedByInput
}

input UserUpdateManyMutationInput {
  nickname: String
  password: String
  image: String
}

input UserUpdateOneRequiredWithoutMelodiesInput {
  create: UserCreateWithoutMelodiesInput
  update: UserUpdateWithoutMelodiesDataInput
  upsert: UserUpsertWithoutMelodiesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMelodiesDataInput {
  nickname: String
  password: String
  image: String
}

input UserUpsertWithoutMelodiesInput {
  update: UserUpdateWithoutMelodiesDataInput!
  create: UserCreateWithoutMelodiesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  melodies_every: MelodyWhereInput
  melodies_some: MelodyWhereInput
  melodies_none: MelodyWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  nickname: String
}
`
      }
    