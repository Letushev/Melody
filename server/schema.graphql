scalar DateTime

type Query {
  user: User,
  getMelody(id: ID!): Melody
  getMelodies: [Melody!]!
  searchMelodies(text: String!): [Melody!]!
}

type Mutation {
  signup(nickname: String!, password: String!): AuthPayload
  login(nickname: String!, password: String!): AuthPayload
  deleteUser(id: ID!): User
  addUserImage(image: String!): User

  createMelody(name: String!, by: String!): Melody
  deleteMelody(id: ID!): Melody
  updateMelody(id: ID!, name: String, by: String, level: String, public: Boolean): Melody
  editMelodyTabs(id: ID!, tabs: String!): Melody
}

type User {
  id: ID!
  nickname: String!
  image: String
  melodies: [Melody!]!
}

type AuthPayload {
  user: User
  token: String
}

type Melody {
  id: ID!
  name: String!
  by: String!
  createdBy: User!
  createdAt: DateTime!
  public: Boolean!
  level: String
  likes: Int
  tabs: String
}
